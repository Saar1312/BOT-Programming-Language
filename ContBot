#!/usr/bin/env python3
#---------------------------------------------------------------------
# Universidad Simón Bolívar                                                          
#    Dpto. de Computación y Tecnología de la Información                                
#    CI3725 - Traductores e Interpretadores                                                                                 	                                 
#                                                                                       
#    Integrantes:                                                                       
#        Sergio Teran, 11-11020                                                       
#        Samuel Arleo R, 10-10969                             
#---------------------------------------------------------------------

import sys
from Parser import *
from Tabla import *
from Pila import *
from Arbol import *
# Creando una instancia de clase Tokenizer
tokenizer = Tokenizer()
#--------------------------------------------------------------------------	
# impr_t_dato()
# 
# imprime la lista de los atributos de datos
#--------------------------------------------------------------------------	
def impr_t_dato(j,tbl=tabla):
	if j != None:
		print('-->\t',j)
		print("-->valor: \t",tbl.tabla[j].valor)
		print("-->tipo: \t",tbl.tabla[j].tipo)
		if tbl.tabla[j].tabla != None:
			print("-->tabla: \t",end = '')
			for x in tbl.tabla[j].tabla.tabla:
			 	print(x,end='')
			print()			
			print("-->estado: \t",tbl.tabla[j].estado)
			print("-->Default: \t",tbl.tabla[j].tieneDefault)
		if tbl.tabla[j].comportamientos != None:
			print("-->nombre: \t",tbl.tabla[j].comportamientos.nombre)

			if tbl.tabla[j].tabla.buscarEnTodos('me','buscar'):
				impr_t_dato('me',tbl.tabla[j].tabla)
#---------------------------------------------------------------------------
# ejecutar()
#
# Ejecuta el programa
#--------------------------------------------------------------------------	
def ejecutar(arbol,exe = False):
	for hijo in arbol.hijos:
		if result.es_arbol(hijo):
			ejecutar(hijo,exe)
		elif tabla.buscarEnTodos(hijo,'buscar'):
			impr_t_dato(hijo)

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#<
#<					MAIN
#<
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Cargando archivo
if len(sys.argv) > 1:
	tokenizer.data = tokenizer.cargarArchivo(sys.argv[1])
	
	# Construyendo analizador lexicografico dentro de la clase
	tokenizer.build()

	# Borrando los tokens innecesarios para el parser
	tokens = tokenizer.tokens
	tokens.remove('TkCommentL')
	tokens.remove('TkCommentC')

	# Construyendo el parser con la gramatica definida en Parser.py
	parser = yacc.yacc(errorlog = yacc.NullLogger())

	# result es la raiz del arbol creado a partir de la gramatica de atributos
	result = parser.parse(tokenizer.data)

	# Creando tabla de simbolos y realizando el analisis semantico
	crearTabla(result,None)
	#------------------------------------------------------------------------------------------------------------#

	# Si hay un error de sintaxis y el arbol no se logra crear correctamente, result
	# sera None y dara error al aplicar imprimirArbol()
	if result:
		# result.imprimirArbol(0)
		ejecutar(result)
	else:
		print("No ha podido generarse el arbol sintactico")
